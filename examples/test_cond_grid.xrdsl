; Test cond macro with grid pattern like million_objects_test
(defbehavior spin
  (state (speed 1.0))
  (update (dt)
    (set! rotation.y (+ rotation.y (* speed dt)))))

(defscene3d test-cond-grid
  ; Create a small 2x2x2 grid to test the cond pattern
  (dotimes (x 2)
    (dotimes (y 2)
      (dotimes (z 2)
        ; Same pattern as million_objects_test
        (let ((obj-type (mod (+ x y z) 4))
              (obj-name (format "obj_~a_~a_~a" x y z))
              (pos-x (* x 2))
              (pos-y (* y 2)) 
              (pos-z (* z 2)))
          
          ; Test the cond macro with multiple conditions
          (cond
            ; Spheres - obj-type 0
            ((= obj-type 0)
             (object obj-name sphere
               (position pos-x pos-y pos-z)
               (scale 0.4 0.4 0.4)
               (material mesh-basic
                 (color 1 0 0)
                 (opacity 1.0)
                 (side front))
               (behavior spin)))
            
            ; Cubes - obj-type 1
            ((= obj-type 1)
             (object obj-name cube
               (position pos-x pos-y pos-z)
               (scale 0.4 0.4 0.4)
               (material mesh-basic
                 (color 0 1 0)
                 (opacity 1.0)
                 (side front))
               (behavior spin)))
            
            ; Cylinders - obj-type 2
            ((= obj-type 2)
             (object obj-name cylinder
               (position pos-x pos-y pos-z)
               (scale 0.4 0.4 0.4)
               (material mesh-basic
                 (color 0 0 1)
                 (opacity 1.0)
                 (side front))
               (behavior spin)))
            
            ; Cones - else case (obj-type 3)
            (else
             (object obj-name cone
               (position pos-x pos-y pos-z)
               (scale 0.4 0.4 0.4)
               (material mesh-basic
                 (color 1 1 0)
                 (opacity 1.0)
                 (side front))
               (behavior spin)))
          )
        )
      )
    )
  )
)