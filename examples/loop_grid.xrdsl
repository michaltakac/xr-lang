; Example demonstrating loop usage for procedural generation
; Creates a grid of cubes using loop constructs

(defbehavior hover
  (state 
    (base-y 0.0)
    (time 0.0)
    (hover-speed 2.0)
    (hover-height 0.5))
  (update (dt)
    (set! time (+ time dt))
    ; Hovering motion
    (set! position.y (+ base-y (* hover-height (sin (* time hover-speed)))))))

(defbehavior spin
  (state 
    (spin-speed 1.0))
  (update (dt)
    (set! rotation.y (+ rotation.y (* spin-speed dt)))))

(defscene3d loop-grid-demo
  (camera
    (position 10.0 8.0 15.0)
    (target 0.0 0.0 0.0)
    (fov 45.0))
    
  (lighting
    (ambient 0.3 0.3 0.4)
    (directional
      (direction 1 1 1)
      (color 1.0 0.95 0.9)
      (intensity 1.2)))
  
  ; Generate a 5x5 grid of cubes using dotimes
  ; Note: This is a conceptual example - the actual implementation
  ; would need to support dynamic object generation
  (dotimes (x 5)
    (dotimes (z 5)
      (object (format "cube_~a_~a" x z) cube
        (position (- (* x 2) 4) 0 (- (* z 2) 4))
        (scale 0.8 0.8 0.8)
        (behavior hover))))
  
  ; Create a ring of spheres using loop
  (loop for i from 0 to 7
    collect
    (object (format "sphere_~a" i) sphere
      (position 
        (* 6 (cos (* i (/ (* 2 3.14159) 8))))
        2
        (* 6 (sin (* i (/ (* 2 3.14159) 8)))))
      (scale 0.5 0.5 0.5)
      (behavior spin)))
  
  (object ground plane
    (position 0 -1 0)
    (scale 20 1 20))
    
  (ui-element info-text text
    (position 0 5 0)
    (size 4 1)
    (text "Loop-Generated Grid Demo")
    (color 1.0 1.0 0.0 1.0)))